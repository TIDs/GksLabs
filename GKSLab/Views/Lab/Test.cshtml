@model List<HashSet<string>>
@{
    Layout = null;
}
<meta charset="utf-8">    
<title>Directed Graph</title>
<link href="~/Content/bootstrap.css" rel="stylesheet" />
<script src="~/Scripts/network.js"></script>
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/angular.min.js"></script>
<script src="~/Scripts/graph/graphModel.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

<style type="text/css">
    /*#network {
        width: 50%;
        height: 100%;
        padding: 50px;
        margin: 50px;
    }*/
    .disabled-btn {
        display: none;
    }
</style>
<script>
    $(document).ready(function () {
        $(function () {
            $("#tabs").tabs();
        });
        //$(function () {
        //    var tabContainers = $('div.tabs > div'); // получаем массив контейнеров
        //    tabContainers.hide().filter(':first').show(); // прячем все, кроме первого
        //    // далее обрабатывается клик по вкладке
        //    $('div.tabs ul.tabNavigation a').click(function () {
        //        tabContainers.hide(); // прячем все табы
        //        tabContainers.filter(this.hash).show(); // показываем содержимое текущего
        //        $('div.tabs ul.tabNavigation a').removeClass('selected'); // у всех убираем класс 'selected'
        //        $(this).addClass('selected'); // текушей вкладке добавляем класс 'selected'
        //        return false;
        //    }).filter(':first').click();
        //});
    });

</script>
<script>
    angular.module("sampleApp", []).controller("defaultCtrl", function ($scope) {
        $scope.currentGraphTabIndex = 0;
        var isInit = false;

        $scope.init = function () {
            $scope.graphArray = new Array();
            for (var i = 0; i < model.length; i++) {
                $scope.graphArray.push(new graphModel(model[i]));
            }
            isInit = true;
            $scope.draw();
        }
        $scope.draw = function () {
            // create a network view
            var networkId = 'network' + $scope.currentGraphTabIndex;
            var network = new links.Network(document.getElementById(networkId));
            var temp = $scope.graphArray[$scope.currentGraphTabIndex].current;
            var tempArr = $scope.graphArray[$scope.currentGraphTabIndex];
            var dot = 'digraph {node[shape=rectangle];' + temp + '}'; //razor will encode model, for disable this - Html.Raw(string)
            var data = links.Network.util.DOTToNetwork(dot);
            // draw the data

            network.draw(data.nodes, data.edges, data.options);
            // resize the network when window resizes
            window.onresize = function () {
                network.redraw();
            };
        }

        //$scope.$watchCollection("graphArray.modelState[currentGraphTabIndex]", function () {
        //    //finding current slider position
        //    $scope.draw();
        //    if (isInit) {
        //        var i = $scope.graphArray[$scope.currentGraphTabIndex].graphModel.index();
        //        if (index <= $scope.graphArray[$scope.currentGraphTabIndex].length - 1) {
        //            $scope.graphArray[$scope.currentGraphTabIndex].nextClass = 'disabled-btn';
        //            $scope.graphArray[$scope.currentGraphTabIndex].prevClass = 'btn btn-primary';
        //        } else
        //            $scope.graphArray[$scope.currentGraphTabIndex].prevClass = 'disabled-btn';
        //        $scope.graphArray[$scope.currentGraphTabIndex].nextClass = 'btn btn-success';
        //    }
        //}, true);
        $scope.prevState = function () {
            $scope.graphArray[$scope.currentGraphTabIndex].prevState();
            $scope.draw();
        }
        $scope.nextState = function () {
            $scope.graphArray[$scope.currentGraphTabIndex].nextState();
            $scope.draw();
        };

        $scope.changeGraph = function () {
            $scope.draw();
        }
    });
</script>
<body ng-app="sampleApp">
    <div class="panel panel-default">
        <div class="panel-heading">Graphs</div>
        <div class="panel-body">
            <div ng-controller="defaultCtrl" ng-init="init()" data-ng-init="draw()">
                <div id="tabs">
                    <ul>
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            <li><a ng-click="currentGraphTabIndex = @i; changeGraph()" href="@String.Format("#tab{0}",i)">Tab @i</a></li>
                        }
                    </ul>

                    @for (var i = 0; i < Model.Count; i++)
                    {
                        <div id="@String.Format("tab{0}", i)">
                            <div class="row">

                                <div class="col-xs-2">
                                    <div class="well">
                                        <button type="button" ng-class="prevClass" value="" ng-click="prevState()">Previous</button>
                                    </div>
                                </div>
                                <div class="col-xs-8">
                                    <div id="@String.Format("network{0}", i)">
                                    </div>
                                </div>
                                <div class="col-xs-2">
                                    <div class="well">
                                        <button type="button" ng-class="nextClass" value="" ng-click="nextState()">Next</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                @*<button type="button" value="Рисовать" ng-click="draw()">Рисовать</button>*@
            </div>
        </div>
    </div>
    <div class="clearfix"></div>

    <script type="text/javascript">

        // parse data in DOT-notation
        var model = new Array();
        @foreach (var item in Model)
        {
           @:strArray = new Array();
                  foreach (var str in item){
                @:strArray.push("@Html.Raw(str)");
              }
        @:model.push(strArray);
                   }

    </script>
    <button class="btn-lg btn-primary"><a style="color:white" id="Return" target="_blank" href="@Url.Action("lab5", "Lab")">Simplify modules</a></button>
</body>
